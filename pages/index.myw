##  Extra Notations

The core MyWord notation for inline elements is the label and bracket notation. This can be used to represent any HTML element, and the content of the brackets can use any other syntax that is defined in a lingo. The core notation is easy to read, and it is very flexible and extendable.  However, there are some other lightweight markup notations, such as the Markdown notations, that have become very popular, and they are even easier to read.

For this reason MyWord enables a variety of extra notations that can be defined in much the same way that labels are defined for the core notation. These notations can be used in many different ways, and they can emulate most of the familiar Markdown notations. The extra notations include symbolic labels, quotes, and double bracket notations.

##  Symbolic Labels

A label is usually defined to apply to content text in brackets, but a symbolic label may be defined as a literal value without any content text. When there is no content text the brackets may be omitted, so the symbolic label by itself is the notation.

Some examples of symbolic labels:

.demo
    :smiley: ^1 #empty x->y @me.

    &
        :smiley:() = &#x1f600;
        ^1()       = &#x1F44D;
        #empty()   = &empty;
        ->()       = &rarr;
        @me()      = I'm *[Fred Smith]
        '()        = &rsquo;
        *()        = <i>

Symbol labels may also be defined with an optional HTML wrapper and transform:

.demo
    ---
    All heart.heart on .date.
    ---

    &
        ---() = <hr/>

        .heart() = <span style='color:red'> &hearts;

        .date()  = <b> dateNow
        dateNow  :: () => new Date().toDateString()


##  Quotes

HTML provides a `<q>` tag that can be used for typographical quotation marks:

.demo
    Nice :q[typographical] quote marks.

    &  :q() = <q>

Even better, quotes can be defined directly as a notation. They are defined as a pattern using quote marks around empty brackets:

.demo
    Nice "typographical" quote marks.

    &  "()" = <q>

An typewriter apostrophe character can serve double duty as single quote marks:

.demo
    That's 'Joes's thing'.

    &
        '()  = &rsquo;
        '()' = squo
        squo :: (content) => '&lsquo;'+markit('myword',content)+'&rsquo;'

A quote can not start or end in the middle of a word. Inside a word the apostrophe is defined as a symbolic label.

The are four other quote mark characters: `[` * _ ~]  that may be used to define quote notations.

These quote marks allow the familiar Markdown notations to be emulated:

.demo
    `if (a>b) {...}`

    *for emphasis*

    __for strong emphasis__

    ~~strike this out~~

    &
        `()` = <code> text
        *()* = <em>
        __()__ = <strong>
        ~~()~~ = <s>

Different quotes can be defined using any of the quote mark characters, and with any number of the same quote mark. Different quotes can be nested:

.demo
    *some **bold** in italics*

    **bold with some *italics* inside**

    &
        *()*   = <i>
        **()** = <b>

The MyWord bracket notation can be used to avoid the restrictions inherent in the quote notations:

.demo
    A long_(and__(bold)) word, __but__ _not_ long_and__bold___.

    &
        _()_   = <i>
        _()    = <i>

        __()__ = <b>
        __()   = <b>

The quote notations are simple and easy to read, but for more complicated expressions MyWord bracket notations may be needed.


##  Double Bracket Notations

A MyWord inline label may be defined with a second set of brackets like this:

.demo
    For example, @[link to something](http://example.com)

    &
        @[]()   = linkURL
        linkURL :~ ([^\t]*)\t(.*) :: (_,txt,url) => "<a href='"+url+"'>"+txt+"</a>"

An image can be defined in much the same way:

.demo
    This image: ![a gopher](images/gopher.png)

    &
        ![]()    = imageURL
        imageURL :~ ([^\t]*)\t(.*) :: (_,txt,url) => "<img src='"+url+"' title='"+txt+"' />"

This emulates the Markdown image notation.

A `[[]()] pattern without a label can be defined to match double brackets, and the same linkURL transform can be used as before.

.demo
    For example, [link to something](http://example.com)

    &
        []()    = linkURL
        linkURL :~ ([^\t]*)\t(.*) :: (_,txt,url) => "<a href='"+url+"'>"+txt+"</a>"

This emulates the Markdown link notation. This double bracket pattern acts as if it has an implicit @ label.

The Markdown link reference definitions can also be emulated by using a block label that matches the Markdown `[[]:] format:

.demo
    For example, a [link to something][eg]

    [eg]:  http://example.com

    &
        [][]    = linkURL
        linkURL :~ ([^\t]*)\t(.*) :: (_,txt,url) =>  "<a href='"+url+"'>"+txt+"</a>"

The reference definition `[[eg]:] is a special block label that is used to define the contents of the second brackets.


##  Markdown Compatibility

MyWord is designed to allow any syntax to be used in the content of a block label, or the content of a bracket label. This means that a standard Markdown parser can be used to translate prose paragraphs. But there is no way to extend the Markdown language, all the notations are pre-defined. The only way for an author to extend Markdown is to use standard HTML.

Markdown is very easy to read and understand, but beyond simple basic expressions the details get very complicated, see the [Common Mark Specification](http://commonmark.org/). A MyWord lingo can emulate a simple version of the common Markdown notations. Many simple Markdown documents can be used as MyWord documents without any changes.

In Markdown each notation has a fixed semantic meaning, so that different quote marks can have very different rules. For example, a back-tick quote represents code, and a star quote mark represents emphasis but they work quite differently. In MyWord all the quote notations work exactly the same way, and the user can define what they mean. This works well for simple basic expressions, but bracket notations are needed for more complex expressions. For example when nested quotes overlap. The MyWord brackets can be used in these situations in much the same way that brackets are used in arithmetic. Markdown has no equivalent to the MyWord bracket notation.

In MyWord all the block labels, such as a `[##] header label, or a `[>] blockquote label, must be offset with a tab or two or more spaces (Markdown allows a single space). This offset format ensures that a label can always be distinguished from the same text being used as the first word in a line of normal prose. In MyWord the user can choose to define any word as a block label. Also, if the content of a block label extends over multiple lines then in MyWord these lines must be indented under the label to show that structure.

In MyWord any number of labels can be defined, so it is usually best for each label to have a single meaning. In Markdown the notations are restricted to a small set of symbols, and the same symbol can have more than one meaning. For example, the `*` is used as a bullet point to label a list element (a block element), but it is also used as a quote mark for `*emphasis*` (an inline element). These notations may be emulated in MyWord like this:

.demo
    *  A bullet point with *[italic text].

    *  Another point with some *emphasis*.

    &
        *    = list <ul>
        *()  = <i>
        *()* = <em>

In MyWord there are no predefined built-in definitions, so the MyWord lingo needs to defines the Markdown notations.



&   // Quotes and apostrohe...

    "()" = <q>
    '()  = &rsquo;
    '()'  = squo
    squo :: (content) => '&lsquo;'+markit('myword',content)+'&rsquo;'

&   // Emulate Markdown...

    `()  = <code> text

    `()` = <code> text
    ``()`` = <code> text
    ```()``` = <code> text
    ````()```` = <code> text

    *()*    = <i>
    **()**  = <b>

    _()_    = <i>
    __()__  = <b>

    ~()~    = <u>
    ~~()~~  = <s>

    []()    = linkURL
    linkURL :: (txt,url) => "<a href='"+url+"'>"+txt+"</a>"

    [][]    = linkURL
    linkURL :: (txt,url) => "<a href='"+url+"'>"+txt+"</a>"
