##  Extra Notations

The core Myword notation for inline elements is the label and bracket notation. This can be used to represent any HTML element, and the content of the brackets can use any other syntax that is defined in a lingo. The core notation is easy to read, and it is very flexible and extendable.  However, there are some other lightweight markup notations, such as the Markdown notations, that have become very popular, and they are even easier to read.

For this reason Myword enables a variety of extra notations that can be defined in much the same way that labels are defined for the core notation. This allow most of the familiar Markdown notations to be emulated. The extra notations include symbols, quotes, and double bracket notations.


##  Symbols

HTML allows any Unicode symbol to be expressed as an entity. For example: `&`rarr; for a &rarr; symbol.

Some symbols can be directly represented with common characters, for example `[->] to represent the &rarr; arrow.

To enable symbol notations Myword allows a definition pattern inside brackets to be used to represent a symbol:

.demo
    x -> y (--)-> z
    ---

    &
        (->) = &rarr;
        (--) = &mdash;
        (---) = <hr>

The symbol notations are simply nicer to read than the standard HTML entity notation.

As another example, the typewriter apostrophe may be used to directly represent a typographical apostrophe. The same character is used for single quote marks, but single quotes can be defined with a bracket label, which allows apostrophe characters to be used inside single quotes:

.demo
    That's '[Joes's thing].

    &
        (')  = &rsquo;
        '    = squo
        squo :: (content) => '&lsquo;'+markit('myword',content)+'&rsquo;'

It is quite rare to need a plain typewriter apostrophe, except in code or keyboard text, which is no problem:

.demo
    It's `[p's and q's]

    &  ` = text <code>

But if required you can always redefine the apostrophe symbol definition:

.demo
    It's p's and q's

    &  (') = &apos;

Or you may choose to define an escape symbol:

.demo
    It's p\'s and q(\')s

    &
        (')  = &rsquo;
        (\') = &apos;

Notice that symbol notations may be written inside brackets, just as they are defined. This allows symbols to be named with any text inside brackets:

.demo
    (c) (tm) [+1] [smiley]

    &
        (c) = &copy;
        (tm) = &trade;
        [+1] = &#x1F44D;
        [smiley] = &#x263A;

Bracket definitions are not restricted to a symbol. They can be defined in the same way as any other label, with a transform and a HTML wrapper:

.demo
    All heart [heart], all done [x]

    The date is: [date].

    &
        [heart] = &hearts; <span style='color:red'>

        [x] = <input type=checkbox checked>

        [date] = dateNow <b>
        dateNow :: () => new Date().toDateString()

##  Quotes

HTML provides a <q> tag that can be used for typographical quotation marks:

.demo
    Nice :q[typographical] quote marks.

    &  :q = <q>

Even better, quotes can be defined directly as a notation. They are defined as a pattern using quote marks around empty brackets:

.demo
    Nice "typographical" quote marks.

    &  "()" = <q>

The characters `[` " * _ ~]  may be used to define quote notations. This allows the familiar Markdown notations to be defined:

.demo
    `if (a>b) {...}`

    *for emphasis*

    __for strong emphasis__

    ~~strike this out~~

    &
        `()` = text <code>
        *()* = <em>
        __()__ = <strong>
        ~~()~~ = <s>

Different quotes can be nested:

.demo
    *some **bold** in italics*

    **bold with some *italics* inside**

    &
        *()*   = <i>
        **()** = <b>

The content inside quotes can also be treated as literal text:

.demo
    `double quoted ``literal text`` inside code quotes`

    ``single `code quotes` inside double text quotes``

    &
        `()`   = code <code>
        ``()`` = text <kbd>

Quotes can only contain an end quote if it is protected inside brackets or a literal text quote:

.demo
    *an inline element `[*] inside quotes*

    *a (*) symbol inside quotes*

    *a code quote `*` inside quotes*

    &
        `     = code <kbd>
        *()*  = <i>
        (*)   = &#x2A;
        `()`  = code <code>

Also, quotes can not be started inside a word, and overlapping quote marks are confusing and best avoided.

The Myword inline markup has none of these restrictions:

.demo
    *[including a * character]

    A long*[and**[bold]] word.

    &
        *  = <i>
        ** = <b>


##  Double Bracket Notations

A Myword inline label may be defined with a second set of brackets like this:

.demo
    For example, @[link to something](http://example.com)

    &
        @[]()   = linkURL
        linkURL :: (txt,url) => "<a href='"+url+"'>"+txt+"</a>"

        linkURL :: (x) => "<a href='"+x.split('\t')[1]+"'>"+x.split('\t')[0]+"</a>"

The second set of brackets can may be defined as a symbol with replacement definition:

.demo
    For example, @[link to something][eg]

    &
        [eg]    = http://example.com

        @[][]  = linkURL
        linkURL :: (txt,url) => "<a href='"+url+"'>"+txt+"</a>"

        linkURL :: (x) => "<a href='"+x.split('\t')[1]+"'>"+x.split('\t')[0]+"</a>"

An image can be defined in much the same way:

.demo
    This image: ![a gopher](images/gopher.png)

    &
        ![]()    = imageURL
        imageURL :: (txt,url) => "<img src='"+url+"' title='"+txt+"' />"

        imageURL :: (x) => "<img src='"+x.split('\t')[1]+"' title='"+x.split('\t')[0]+"' />"

This emulates the Markdown image notation.

To emulate the Markdown link notations a bracket pattern can be used without any explicit label, like this:

.demo
    For example, a [link to something][eg]

    &
        [eg]    = http://example.com

        [][]    = linkURL
        linkURL :: (txt,url) => "<a href='"+url+"'>"+txt+"</a>"

        linkURL :: (x) => "<a href='"+x.split('\t')[1]+"'>"+x.split('\t')[0]+"</a>"

The `[[]()] pattern matches the double brackets, and the same linkURL transform can be used as before. It is as if it has an implicit @ label.

The Markdown link reference definitions can also be emulated by using a label that matches the Markdown `[[]:] format:

.demo
    For example, a [link to something][eg]

    [eg]:  http://example.com

    &
        [][]    = linkURL
        linkURL :: (txt,url) => "<a href='"+url+"'>"+txt+"</a>"

        linkURL :: (x) => "<a href='"+x.split('\t')[1]+"'>"+x.split('\t')[0]+"</a>"

The reference definition `[[eg]:] is a special block label pattern that is automatically translated into a label definition like this:

.eg
    [eg]:  http://example.com      =>       &  [eg] = http://example.com

This is another way to define symbols:

.demo
    From [alpha] -> [omega].

    [alpha]:  &alpha;
    [omega]:  &omega;
    [->]:     &rarr;


##  Markdown Compatibility

Markdown comes in many different flavours, but the majority of common Markdown notations can be used in a Myword document. The difference is that in Myword a block label, such as a `[##] header label, or a `[>] blockquote label, must be offset with a tab or two or more spaces (Markdown allows a single space). This simple offset format ensures that a label can always be distinguished from the same text being used as the first word in a line of normal prose. Also, if the content of a block label extends over multiple lines then in Myword these lines must be indented under the label to show that structure.

In Myword there are no predefined built-in definitions, so to use Markdown notations they must be defined in a Myword lingo. In Markdown the same label may have a different meaning, depending on how the label is used. For example, the * is used to label a list element bullet point, but it is also used as a quote mark for `[*emphasis*].

It is usually best for a label to have a single meaning. Thus the standard Myword label definition is generic. It allows the label to be used as a block label, or as an inline label with either square brackets or parentheses. But more specific definition patterns can be defined if required:

.demo
    *  A bullet point with some *emphasis*.
    *  Another point with *[italic text].

    &
        *    = list <ul>
        *[]  = <i>
        *()  = <i>
        *()* = <em>













&  " = dquo
   dquo :: (c) => '&ldquo;'+markit('myword',c)+'&rdquo;';

&  ' = squo
   squo :: (c) => '&lsquo;'+markit('myword',c)+'&rsquo;';

&  []() = link2url
    link2url :: (args) => {
        return "<a href='"+args.split('\t')[1]+"'>"+args.split('\t')[0]+"</a>"; };

&  [][] = link2ref
    link2ref :: (args) => {
        var ref = args.split('\t')[1]
        var url = markit.metadata('['+ref+']:');
        if (!url) return "["+args.split('\t')[0]+"][<mark>"+ref+"</mark>]";
        return "<a href='"+url+"'>"+args.split('\t')[0]+"</a>"; };
