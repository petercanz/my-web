##  Extra Notations

The MyWord bracket notation for inline elements can be used to represent any HTML element. The bracket notation is easy to read, and it is very flexible and extendable.  However, there are simpler notations that are even easier to read, such as the notations used in Markdown.

For this reason MyWord also supports some extra notations. These notations can be used to emulate most of the popular Markdown notations. The extra notations include symbols, quotes, and double bracket notations.

##  Symbols

MyWord allows users to define custom symbols to represent other text. For example, the symbol `->` can be defined to represent the -> character, and the plain text apostrophe `'` character can be defined to represent a fancy &rsquo; typographical apostrophe:

&   (->) = &rarr;

.demo
    x->y

    Joe's thing.

    &
        (->)   = &rarr;
        (')    = &rsquo;

In the definition the symbol must appear inside brackets, but as a notation the symbol may be used without the brackets.

A symbol can not start with a letter or digit character, but it may contain any characters other than white-space or brackets:

.demo
    :smiley: ^1 #empty

    &
        (:smiley:) = &#x1f600;
        (^1)       = &#x1F44D;
        (#empty)   = &empty;

A symbol can be defined to represent any MyWord text:

.demo
    Hello, @me

    &
        (@me)      = I'm *[Fred Smith]
        (')        = &rsquo;
        *()        = <i>

Symbols may also be defined with an HTML wrapper, and with a transform:

.demo
    ---
    All heart.heart on .date.
    ---

    &
        (---) = <hr/>

        (.heart) = <span style='color:red'> &hearts;

        (.date)  = <b> dateNow
        dateNow  :: () => new Date().toDateString()

Notice in this example that the symbols can be used immediately after other text, or before punctuation. But in other cases brackets may be necessary:

.demo
    (<-)->

    <-->


    &
        (<-) = &larr;
        (->) = &rarr;

        (<-->) = harr
        harr :: () => '&larr;'+'&rarr;'



##  Quotes

HTML provides a `<q>` tag for a quotation, which is presented with nice typographical quotation marks. Quotes can be defined as standard MyWord bracket notations:

.demo
    Nice :q[typographical] quote marks.

    Nice "[typographical] quote marks.

    &
      :q() = <q>
      "() = <q>

Even better, quotes can be defined as a MyWord notation. The quote notation is defined with a pattern that shows the quote marks around empty brackets:

.demo
    Nice "typographical" quote marks.

    &  "()" = <q>

A quote notation must start at a word boundary, i.e. at the start of text, or after a white-space. A quote must also end at a word broundary, i.e the end quote mark must be the end of text, or be followed by white-space, or punctuation. The end quote mark can not be followed by a letter or digit.

The typewriter apostrophe character `'` can serve double duty as single quote marks:

.demo
    That's 'Joes's thing'.

    &
        (')  = &rsquo;
        '()' = squo
        squo :: (content) => '&lsquo;'+markit('myword',content)+'&rsquo;'

Since a quote can not start or end in the middle of a word the ' inside a word is defined as an apostrophe symbol.

There are four other quote mark characters: `[` * _ ~]  that may be used to define quote notations.

These quote marks allow the familiar Markdown notations to be emulated:

.demo
    `if (a>b) {...}`

    *for emphasis*

    __for strong emphasis__

    ~~strike this out~~

    &
        `()` = <code> text
        *()* = <em>
        __()__ = <strong>
        ~~()~~ = <s>

Different quotes can be defined using any of the quote mark characters, and with any number of the same quote mark. Different quotes can be nested:

.demo
    *some **bold** in italics*

    **bold with some *italics* inside**

    &
        *()*   = <i>
        **()** = <b>

The MyWord bracket notation can be used to avoid the restrictions inherent in the quote notations:

.demo
    A long_and__bold___word

    A long_(and__(bold))word

    &
        _()_   = <i>
        __()__ = <b>

        _()    = <i>
        __()   = <b>

The quote notations are simple and easy to read in most common usage, but bracket notations may be required for more complex expressions.

Another option is to use a bracket notation to group the quote notations:

.demo
    A long.(_and.(__bold__)_)word

    &
        _()_   = <i>
        __()__ = <b>

        .()    = <span>



##  Double Bracket Notations

The label pattern `[[]()] can be defined to match double bracket notations, as used for links in Markdown.

.demo
    For example, a [link to something](http://example.com)

    &
        []()    = linkURL

        linkURL :: (content) => {
            var parts = content.match(/^\[(.+?)\]\((.+?)\)$/);
            var txt = markit('myword', parts[1]);
            var url = markit('text', parts[2]);
            return "<a href='"+url+"'>"+txt+"</a>"; }

This label pattern gives the transfom the full source text as the content (including the brackets).

The Markdown link reference definitions can be emulated with a block label that matches the Markdown `[[]:] format:

.demo
    For example, a [link to something][eg]

    [eg]:  http://example.com

    &
        [][]    = linkREF

        linkREF :: (content) => {
            var parts = content.match(/^\[(.+?)\]\[(.+?)\](.*)$/);
            var txt = markit('myword', parts[1]);
            var ref = markit('text', parts[2]);
            if (!parts[3]) return '['+txt+'][<mark>'+ref+'</mark>]';
            var url = markit('text', parts[3]);
            return "<a href='"+url+"'>"+txt+"</a>"; }

The reference definition `[[eg]:] is a special block label that is used to define the reference given in the second brackets.

This label pattern appends the value of the reference to the source content. If the reference is not defined then the linkREF transform can mark that as an error.

The Markdown notation for an image can be defined in much the same way:

.demo
    This image: ![go gopher](images/gopher.png)

    &
        ![]()    = imageURL
        ![][]    = imageREF

        imageURL :: (content) => {
            var parts = content.match(/^(.*?)\[(.+?)\]\((.+?)\)$/);
            var txt = markit('myword', parts[2]);
            var url = markit('text', parts[3]);
            return "<img src='"+url+"' title='"+txt+"'/>"; }

        imageREF :: (content) => {
            var parts = content.match(/^(.*?)\[(.+?)\]\((.+?)\)(.*)$/);
            var label = parts[1];
            var txt = markit('myword', parts[2]);
            var ref = markit('text', parts[3]);
            if (!parts[4]) return label+'['+txt+'][<mark>'+ref+'</mark>]';
            var url = markit('text', parts[4]);
            return "<img src='"+url+"' title='"+txt+"'/>"; }

This emulates the Markdown image notations.



##  Markdown Compatibility

MyWord is designed to allow a label to be defined with any syntax it wants to use in the content text. This means that a standard Markdown parser can be used to translate prose paragraphs in a MyWord document. This provides full Markdown compatibility, but there is no way to extend beyond the Markdown language since all the notations are pre-defined. The only way for an author to extend Markdown is to use standard HTML.

Instead, MyWord can be used to emulate Markdown notations. This enables most Markdown documents to be used in MyWord without any changes, but the MyWord notations are also available to extend beyond Markdown.

Markdown is very easy to read and understand, but beyond simple basic expressions the details get very complicated, see the [Common Mark Specification](http://commonmark.org/). A MyWord lingo can emulate Markdown to cover most common usage, and MyWord notations can cover any complex special cases or extensions that may be required.

In MyWord all the block labels, such as a `[##] header label, or a `[>] blockquote label, must be offset with a tab or two or more spaces (Markdown allows a single space). This offset format ensures that a label can always be distinguished from the same text being used as the first word in a line of normal prose. In MyWord the user can choose to define any word as a block label. Also, if the content of a block label extends over multiple lines then in MyWord these lines must be indented under the label to show that structure.

In Markdown each notation has a fixed semantic meaning, so the different Markdown quote mark notations can have very different rules. For example, a back-tick quote represents code, and a star quote mark represents emphasis but they work quite differently. In MyWord all the quote notations work exactly the same way, and the user can define what they mean. This works well for simple basic expressions, but bracket notations are needed for more complex expressions. For example when nested quotes overlap and are conflated. The MyWord brackets can be used in these situations in much the same way that brackets are used in arithmetic. Markdown has no equivalent to the MyWord bracket notation.

In MyWord any number of labels can be defined, so it is usually best for each label to have a single meaning. In Markdown the notations are restricted to a small set of symbols, and the same symbol can have more than one meaning. For example, the `*` is used as a bullet point to label a list element (a block element), but it is also used as a quote mark for `*emphasis*` (an inline element). These notations may be emulated in MyWord like this:

.demo
    *  A bullet point with *[italic text].

    *  Another point with some *emphasis*.

    &
        *    = list <ul>
        *()  = <i>
        *()* = <em>

In MyWord there are no predefined built-in definitions, so the MyWord lingo needs to defines the Markdown notations.



&   // Apostrophe and Quotes...

    (')  = &rsquo;
    "()" = <q>
    '()' = squo
    squo :: (content) => '&lsquo;'+markit('myword',content)+'&rsquo;'

&   // Emulate Markdown elements .......

    `()  = <code> text

    `()` = <code> text
    ``()`` = <code> text
    ```()``` = <code> text
    ````()```` = <code> text

    *()*    = <em>
    **()**  = <strong>

    _()_    = <i>
    __()__  = <b>

    ~()~    = <u>
    ~~()~~  = <s>

    // links ..................

    []()    = linkURL

    linkURL :: (content) => {
        var parts = content.match(/^\[(.+?)\]\((.+?)\)$/);
        var txt = markit('myword', parts[1]);
        var url = markit('text', parts[2]);
        return "<a href='"+url+"'>"+txt+"</a>"; }

    [][]    = linkREF

    linkREF :: (content) => {
        var parts = content.match(/^\[(.+?)\]\[(.+?)\](.*)$/);
        var txt = markit('myword', parts[1]);
        var ref = markit('text', parts[2]);
        if (!parts[3]) return '['+txt+'][<mark>'+ref+'</mark>]';
        var url = markit('text', parts[3]);
        return "<a href='"+url+"'>"+txt+"</a>"; }

    // images ..............

    ![]()    = imageURL
    ![][]    = imageREF

    imageURL :: (content) => {
        var parts = content.match(/^(.*?)\[(.+?)\]\((.+?)\)$/);
        var txt = markit('myword', parts[2]);
        var url = markit('text', parts[3]);
        return "<img src='"+url+"' title='"+txt+"'/>"; }

    imageREF :: (content) => {
        var parts = content.match(/^(.*?)\[(.+?)\]\((.+?)\)(.*)$/);
        var label = parts[1];
        var txt = markit('myword', parts[2]);
        var ref = markit('text', parts[3]);
        if (!parts[4]) return label+'['+txt+'][<mark>'+ref+'</mark>]';
        var url = markit('text', parts[4]);
        return "<img src='"+url+"' title='"+txt+"'/>"; }
